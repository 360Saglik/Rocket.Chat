name: 'Build docker image'
description: 'Build container image for alpine, debian bases and the preview image; pushes to github container registry'

inputs:
  registry-username:
    description: ''
    required: true
  registry-token:
    description: ''
    required: true
  node-version:
    required: false
    description: 'Node version'
  platform:
    required: false
    description: 'Platform'
  repository-owner:
    description: 'Owner of registry repository'
    required: false
    default: 'rocketchat'
  version-tag:
    description: 'Version part of a image tag'
    required: true
  registry:
    default: ghcr.io
    description: 'Registry to push the images to'
  targets:
    description: 'Targets to build'
    required: false

runs:
  using: composite

  steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-token }}

    - name: Restore build
      uses: actions/download-artifact@v3
      with:
        name: build
        path: dist

    - name: Unpack build
      shell: bash
      run: |
        cd dist
        tar xzf Rocket.Chat.tar.gz
        rm Rocket.Chat.tar.gz

    - uses: dtinth/setup-github-actions-caching-for-turbo@v1

    # no need to "build" stuff if not building the ms targets
    - name: Setup NodeJS
      if: inputs.platform == 'alpine'
      uses: ./.github/actions/setup-node
      with:
        node-version: ${{ inputs.node-version }}
        cache-modules: true
        install: true

    - run: yarn build
      if: inputs.platform == 'alpine'
      shell: bash

    - uses: docker/setup-qemu-action@v2
    - uses: docker/setup-buildx-action@v2
      with:
        driver: docker-container
        platforms: linux/amd64,linux/arm64

    - name: Build and push docker images
      shell: bash
      run: |
        export repository_owner=${{ inputs.repository-owner }}
        export tag=${{ inputs.version-tag }}
        export registry=${{ inputs.registry }}

        print_and_build() {
          docker buildx bake --print "$@"
          docker buildx bake "$@" --push
        }

        type=${{ inputs.platform }}
        
        if [[ $type == 'preview' ]]; then
          print_and_build preview
          exit $?
        fi

        if [[ $type == 'official' ]]; then
          print_and_build monolith
          exit $?
        fi

        targets=(monolith_alpine)
        targets+=(${{inputs.targets}})

        print_and_build "${targets[@]}"
